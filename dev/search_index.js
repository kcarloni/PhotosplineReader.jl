var documenterSearchIndex = {"docs":
[{"location":"internalapis/","page":"APIs","title":"APIs","text":"Modules = [PhotosplineReader]","category":"page"},{"location":"internalapis/#PhotosplineReader.SplineTable-Tuple{FITSIO.FITS}","page":"APIs","title":"PhotosplineReader.SplineTable","text":"SplineTable( f::FITS )\n\nread a FITS file into a SplineTable struct.\n\n\n\n\n\n","category":"method"},{"location":"internalapis/#PhotosplineReader.evaluate_simple-Tuple{Any, SplineTable}","page":"APIs","title":"PhotosplineReader.evaluate_simple","text":"evaluate_simple( x, spt::SplineTable )\n\nevalute the spline at x.\n\n\n\n\n\n","category":"method"},{"location":"internalapis/#PhotosplineReader.spline_interpolation-Tuple{SplineTable}","page":"APIs","title":"PhotosplineReader.spline_interpolation","text":"spline_interpolation( spt::SplineTable )\nspline_interpolation( f::FITS )\n\nmake an Interpolation object from a given SplineTable. note that this method assumes that spline padding knots are symmetric on both sides, and that it Interpolations supports only up to cubic-order B-splines.\n\n\n\n\n\n","category":"method"},{"location":"#PhotosplineReader.jl","page":"-","title":"PhotosplineReader.jl","text":"","category":"section"},{"location":"","page":"-","title":"-","text":"(Image: Dev) (Image: Build Status)","category":"page"},{"location":"","page":"-","title":"-","text":"source code adapted to julia from https://github.com/icecube/photospline, with help from FITSIO.jl and BasicBSpline.jl.","category":"page"},{"location":"#Quick-start","page":"-","title":"Quick start","text":"","category":"section"},{"location":"","page":"-","title":"-","text":"julia> using PhotosplineReader\n\njulia> fpath = \"PhotosplineReader.jl/test/examples/IceCube_data_release_202209013_kdes/E_dec_photospline_v006_3D.fits\";\n\njulia> spt = SplineTable( fpath )\n3-dimensional SplineTable of b-spline orders [1, 1, 3],\nwith extents:\n    (0.83, 10.21)\n    (-0.17, 1.00)\n    (0.57, 4.42)\n\njulia> x = [ 2.8, 0.2, 3.0 ]\n3-element Vector{Float64}:\n 2.8\n 0.2\n 3.0\n\njulia> spt(x)\n0.7973871961087491\n\njulia> spt(x...)\n0.7973871961087491","category":"page"},{"location":"#Interfacing-with-Interpolations.jl","page":"-","title":"Interfacing with Interpolations.jl","text":"","category":"section"},{"location":"","page":"-","title":"-","text":"julia> using Interpolations\n\njulia> spt = SplineTable( fpath )\n3-dimensional SplineTable of b-spline orders [1, 1, 3],\nwith extents:\n    (0.83, 10.21)\n    (-0.17, 1.00)\n    (0.57, 4.42)\n\njulia> itp = spline_interpolation( spt );\n\njulia> typeof( itp )\nInterpolations.FilledExtrapolation{Float64, 3, ScaledInterpolation{Float32, 3, Interpolations.BSplineInterpolation{Float32, 3, Array{Float32, 3}, Tuple{BSpline{Linear{Throw{OnGrid}}}, BSpline{Linear{Throw{OnGrid}}}, BSpline{Cubic{Line{OnGrid}}}}, Tuple{Base.Slice{UnitRange{Int64}}, Base.Slice{UnitRange{Int64}}, Base.Slice{UnitRange{Int64}}}}, Tuple{BSpline{Linear{Throw{OnGrid}}}, BSpline{Linear{Throw{OnGrid}}}, BSpline{Cubic{Line{OnGrid}}}}, Tuple{StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}}, Tuple{BSpline{Linear{Throw{OnGrid}}}, BSpline{Linear{Throw{OnGrid}}}, BSpline{Cubic{Line{OnGrid}}}}, Float64}\n\njulia> itp( x... )\n0.7973871961087493\n\njulia> Interpolations.gradient( itp, x... )\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n -1.0382749146578347\n -0.4631499529505209\n  0.08274258979323065","category":"page"}]
}
